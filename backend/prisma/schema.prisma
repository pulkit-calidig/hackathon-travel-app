// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
    id          Int             @id @default(autoincrement())
    username    String          @unique
    email       String          @unique
    password    String
    bookings    Booking[]
    reviews     Review[]
    wishlist    Wishlist[]
}

model Package {
  id          Int               @id @default(autoincrement())
  country     String
  city        String
  packages    Json              // Store package details as JSON
  bookings    Booking[]
}

model Destination {
  id          Int               @id @default(autoincrement())
  name        String
  country     String
  description String?
  bookings    Booking[]
  wishlist    Wishlist[]
}

model Booking {
  id            Int             @id @default(autoincrement())
  userId        Int
  packageId     Int
  destinationId Int
  startDate     DateTime
  endDate       DateTime
  deletedAt     DateTime?
  status        BookingStatus   @default(PENDING)
  reviews       Review[]
  payment       Payment?
  guests        Int             @default(1)

  user          Users           @relation(fields: [userId], references: [id])
  package       Package         @relation(fields: [packageId], references: [id])
  destination   Destination     @relation(fields: [destinationId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookingId Int
  rating    Int
  comment   String?

  user      Users    @relation(fields: [userId], references: [id])
  booking   Booking  @relation(fields: [bookingId], references: [id])
}

model Payment {
  id        Int                 @id @default(autoincrement())
  bookingId Int                 @unique
  amount    Float
  status    PaymentStatus       @default(PENDING)

  booking   Booking             @relation(fields: [bookingId], references: [id])
}

model Wishlist {
  id            Int             @id @default(autoincrement())
  userId        Int
  destinationId Int

  user          Users           @relation(fields: [userId], references: [id])
  destination   Destination     @relation(fields: [destinationId], references: [id])
}

enum PackageType {
  STANDARD
  ECONOMY
  LUXURY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
