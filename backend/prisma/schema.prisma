// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id          Int             @id @default(autoincrement())
  username    String          @unique
  email       String          @unique
  password    String
  bookings    Booking[]
  reviews     Review[]
  wishlist    Wishlist[]
}

model Country {
  id       Int                  @id @default(autoincrement())
  name     String               @unique
  cities   City[]
}

model City {
  id        Int                 @id @default(autoincrement())
  name      String              @unique
  countryId Int
  country   Country             @relation(fields: [countryId], references: [id])
  packages  Package[]
}

model Package {
  id          Int               @id @default(autoincrement())
  cityId      Int
  type        PackageType
  price       Float
  description String
  city        City              @relation(fields: [cityId], references: [id])
  booking     Booking[]
}

model Destination {
  id          Int               @id @default(autoincrement())
  name        String
  country     String
  description String?
  iataCode    String
  bookings    Booking[]
  wishlist    Wishlist[]
}

model Stop {
  id          Int      @id @default(autoincrement())
  bookingId   Int
  name        String
  description String?
  location    String?     // Optional address or landmark
  latitude    Float       // Required for map
  longitude   Float       // Required for map
  order       Int         // Optional: order of the stop
  createdAt   DateTime    @default(now())

  booking     Booking   @relation(fields: [bookingId], references: [id])
}

model Origin {
  id          Int               @id @default(autoincrement())
  name        String
  country     String
  description String?
  iataCode    String
  bookings    Booking[]
  wishlist    Wishlist[]
}

model Booking {
  id            Int        @id @default(autoincrement())
  userId        Int
  packageId     Int
  originId      Int
  destinationId Int
  itineraryId   Int?
  startDate     DateTime
  endDate       DateTime
  status        Int        @default(0)
  guests        Int        @default(1)
  deletedAt     DateTime?

  reviews       Review[]
  payment       Payment?
  flights       Flight[]
  itinerary     Itinerary[]
  stops         Stop[]

  user          Users       @relation(fields: [userId], references: [id])
  package       Package     @relation(fields: [packageId], references: [id])
  destination   Destination @relation(fields: [destinationId], references: [id])
  origin        Origin      @relation(fields: [originId], references: [id])
}

model Flight {
  id                  Int       @id @default(autoincrement())
  bookingId           Int       @unique
  departureDate       DateTime
  departureIataCode   String
  arrivalIataCode     String
  scheduledDeparture  String
  scheduledArrival    String
  status              Int       @default(0)
  deletedAt           DateTime?

  booking             Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model Itinerary {
  id          Int      @id @default(autoincrement())
  bookingId   Int      @unique
  userId      Int
  departure   DateTime
  arrival     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  booking     Booking  @relation(fields: [bookingId], references: [id])
  days        ItineraryDay[]
}

model ItineraryDay {
  id          Int       @id @default(autoincrement())
  itineraryId Int
  dayNumber   Int
  content     String
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookingId Int
  rating    Int
  comment   String?

  user      Users    @relation(fields: [userId], references: [id])
  booking   Booking  @relation(fields: [bookingId], references: [id])
}

model Payment {
  id        Int                 @id @default(autoincrement())
  bookingId Int                 @unique
  amount    Float
  status    Int                 @default(0)

  booking   Booking             @relation(fields: [bookingId], references: [id])
}

model Wishlist {
  id            Int             @id @default(autoincrement())
  userId        Int
  destinationId Int
  originId      Int

  user          Users           @relation(fields: [userId], references: [id])
  destination   Destination     @relation(fields: [destinationId], references: [id])
  origin        Origin          @relation(fields: [originId], references: [id])
}

enum PackageType {
  STANDARD
  ECONOMY
  LUXURY
}
